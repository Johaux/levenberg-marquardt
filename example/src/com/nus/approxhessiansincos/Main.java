package com.nus.approxhessiansincos;

/**
 * Created by duy on 12/8/15.
 */

import com.nus.LmSumSquaresError;
import com.nus.LmSolver;

/**
 * Task: Suppose the true model is f(x) = 0.5 * cos(2 * x) + 2 * sin(0.5 * x)
 *
 * Given the set of points generated by
 *                f(x) = 0.5 * cos(2 * x) + 2 * sin(0.5 * x)
 * with some noise, use Levenberg-Marquardt algorithm to find the model to fit
 * all the points.
 *
 * The Hessian matrix will be approximated by the Jacobian matrix
 */
public class Main {
  public static void main(String[] args) {
    double[][] xy = {
      {1.0, 0.76}, {1.5, 0.86}, {-1.0, -1.18}, {2.0, 1.356}, {1.8, 1.118},
      {2.5, 2.039}, {-0.5, -0.224}, {-0.8, -0.7934}, {-1.1, -1.339},
      {2.2, 1.63}, {2.6, 2.1613}, {2.8, 2.35}, {-2.0, -2.009}, {-2.2, -1.936},
      {-1.7, -1.985}, {-1.4, -1.759}, {0.05, 0.55}, {0.0, 0.5},
      {1.5707963, 0.914}, {-1.5707963, -1.9142}, {0.6, 0.77}, {-0.6, -0.4},
      {1.67, 1.0}, {2.4, 1.9}, {0.1, 0.59}
    };

    int numData = xy.length;
    double x[] = new double[numData];
    double y[] = new double[numData];
    for (int i = 0; i < numData; ++i) {
      x[i] = xy[i][0];
      y[i] = xy[i][1];
    }

    ModelSinCosFunc model = new ModelSinCosFunc(x, y);
    LmSumSquaresError errorFunc = new LmSumSquaresError(model);

    LmSolver lmSolver = new LmSolver(errorFunc, 1e-3, 50, 1e-8, 1e-8);

    double allAbs[][] = {{1.7, 3}, {0.25, 1.5}, {0.0, 3.0}, {10.0, 5.0}};
    for (int i = 0; i < allAbs.length; ++i) {
      double[] ab = allAbs[i];
      System.out.printf("Result with initial guess (a, b) = (%f, %f):\n",
        ab[0], ab[1]);
      lmSolver.solve(ab, true);
      System.out.println(ab[0]);
      System.out.println(ab[1]);
    }
  }
}
